KeysDictionary('sps', (1, 9),
               Key('text', String(help='text for humans')),
               Key('version', String(help='SPS actor version',
                                     FITS=('W_RVSPS', 'W_SPSACTOR_VERSION'))),
               Key('version_tron_actorcore', String()),
               Key('version_pfs_utils', String()),
               Key('version_ics_actorkeys', String()),
               Key('exposable', String(help='camList that can be safely exposed') * (1, None)),
               Key('fileIds',
                   Int(help='assigned PFS visit'), String('camera list'), UInt(name="camMask", reprFmt="0x%04x")),
               Key('visit', Int(help='assigned PFS visit')),
               Key('frames', String(help='camList for frames that has genuinely been created') * (1, None)),

               Key("specModules", String(help='spectrograph modules list') * (1, None)),
               Key("spsModules", String(help='sps modules definition') * (1, None)),
               Key("sm1Parts", String(help='spectrograph module 1 parts list') * (1, None)),
               Key("sm2Parts", String(help='spectrograph module 2 parts list') * (1, None)),
               Key("sm3Parts", String(help='spectrograph module 3 parts list') * (1, None)),
               Key("sm4Parts", String(help='spectrograph module 4 parts list') * (1, None)),

               Key("sm1LightSource", String(help='spectrograph module 1 light source')),
               Key("sm2LightSource", String(help='spectrograph module 2 light source')),
               Key("sm3LightSource", String(help='spectrograph module 3 light source')),
               Key("sm4LightSource", String(help='spectrograph module 4 light source')),

               Key('biaStatus',
                   Int(name='power', units='percent', invalid=-1, help='bia power(%)',
                       FITS=('W_BIAPOW', 'W_SPS_BIA_POWER')),
                   Int(name='period', units='ms', invalid=-1, help='bia strobe period',
                       FITS=('W_BIAPER', 'W_SPS_BIA_STROBE_PERIOD')),
                   Int(name='strobeDuty', units='percent', invalid=-1, help='bia strobe duty cycle',
                       FITS=('W_BIADTY', 'W_SPS_BIA_STROBE_DUTY')),
                   Int(name='pulseOn', units='ms', invalid=-1, help='bia pulse high duration',
                       FITS=('W_BIAON', 'W_SPS_BIA_PULSE_ON')),
                   Int(name='pulseOff', units='ms', invalid=-1, help='bia pulse low duration',
                       FITS=('W_BIAOFF', 'W_SPS_BIA_PULSE_OFF'))),
               Key('pfiShutters',
                   Enum('close', 'open', 'undef', help='declaring when any PFI-connected shutter becomes open '
                                                       'and when all PFI-connected shutters become closed.'))

               )
